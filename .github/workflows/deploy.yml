name: Rebuild and Push Docker Image with Clean Tag

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" >> apps/web/.env
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> apps/web/.env
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> apps/web/.env
          echo "NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}" >> apps/web/.env

      - name: Write Firebase service account key
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}" > apps/web/firebase-service-account.json

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies (monorepo root)
        run: npm install

      # - name: Delete old :latest tag from Docker Hub
      #   run: |
      #     curl -X DELETE -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" \
      #     https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/turbonote_ui/tags/latest/
      #   continue-on-error: true  # ignore if tag doesn't exist

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build new Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/turbonote_ui:latest -f docker/web.Dockerfile .

      - name: Push new Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/turbonote_ui:latest

      - name: Trigger Render redeploy
        run: |
          curl --request POST \
            --url https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
            --header 'content-type: application/json' \
            --data '{
              "clearCache": "do_not_clear",
              "imageUrl": "docker.io/nirock2000/turbonote_ui:latest"
            }'